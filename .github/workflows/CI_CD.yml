name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build backend
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Build frontend
        run: |
          cd frontend
          npm install
          export NODE_ENV=production
          CI=false npm run build  #ESLint 오류,경고가 빌드시에는 에러로 판단함 그래서 빌드단계에서 CI=false 지정해줘야 함

      - name: Build and push Docker images
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-app:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/app  # 디렉토리 없으면 생성
            cd /home/ubuntu/app
            
             # Docker Hub 로그인 후 최신 이미지 가져오기
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest
            
            # 환경변수 설정
            export DB_URL="${{ secrets.DB_URL }}"
            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}"
            export MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
            export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
            
            # 기존 컨테이너 종료
            docker stop backend-container || true
            docker stop frontend-container || true
            docker rm backend-container || true
            docker rm frontend-container || true
            
            # 새로운 컨테이너 실행
            docker run -d --name backend-container \
              -e DB_URL=${DB_URL} \
              -e DB_USERNAME=${DB_USERNAME} \
              -e DB_PASSWORD=${DB_PASSWORD} \
              -e MAIL_USERNAME=${MAIL_USERNAME} \
              -e MAIL_PASSWORD=${MAIL_PASSWORD} \
              -e JWT_SECRET_KEY=${JWT_SECRET_KEY} \
              -p 8080:8080 \
              ${{ secrets.DOCKER_USERNAME }}/backend-app:latest

            docker run -d --name frontend-container \
              -e REACT_APP_API_URL="${{ secrets.EC2_IP }}"
              -p 80:80 \
              ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest