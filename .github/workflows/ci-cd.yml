name: Build and Deploy

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  build-backend:
    name: Build Backend (Spring Boot)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          cd backend 
          ./gradlew clean build -x test

      - name: Upload Backend JAR Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-jar
          path: backend/build/libs/*.jar

  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-backend  # 이전 job이 완료된 후 실행

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Backend JAR Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-jar
          path: backend  # JAR 파일 다운로드

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자명
          password: ${{ secrets.DOCKER_TOKEN }}  # Docker Hub Access Token

      - name: Build Backend Docker Image
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .  # Dockerfile이 있는 디렉토리에서 빌드

      - name: Push Backend Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest  # Docker Hub에 푸시

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: docker-build-push  # 이전 job이 완료된 후 실행

    steps:
      - name: SSH into Server & Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_IP }}  # 배포할 서버의 IP
          key: ${{ secrets.EC2_SSH_KEY }}  # 서버 SSH 키
          script: |
            cd /home/ubuntu/my-project  # 서버에서 프로젝트 디렉토리로 이동
            docker-compose pull  # 최신 이미지로 업데이트
            docker-compose up -d  # 백그라운드에서 컨테이너 실행
            docker system prune -f  # 사용하지 않는 Docker 리소스 정리
