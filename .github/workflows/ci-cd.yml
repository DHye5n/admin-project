name: Build and Deploy

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ GitHub 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2️⃣ Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3️⃣ DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 4️⃣ 백엔드 빌드 (Spring Boot)
      - name: Build Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./backend

      # 5️⃣ 프론트엔드 빌드 (Nginx + React)
      - name: Build Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend

      # 6️⃣ Docker 이미지 푸시 (백엔드 & 프론트엔드)
      - name: Push Backend Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Push Frontend Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # build 단계가 끝나야 실행됨

    steps:
      # 1️⃣ SSH 키 설정 (EC2 서버 연결)
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      # 2️⃣ EC2 서버에서 최신 코드 가져오기 & 컨테이너 배포
      - name: Deploy to EC2
        run: |
          ssh ec2-user@${{ secrets.EC2_IP }} << 'EOF'
            cd /home/ec2-user/adminproject  # 프로젝트 디렉토리 이동
            git pull origin main  # 최신 코드 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker-compose down  # 기존 컨테이너 종료
            docker-compose up -d  # 새로운 컨테이너 실행
          EOF
